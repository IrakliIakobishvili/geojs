location = /v1/dns/ptr {
    default_type text/plain;
    content_by_lua_block {
        -- Function to get our PTR!
        local getptr = require("geojs.utils").get_ptr
        -- Vars
        local record
        -- Get the IP we want
        local args = ngx.req.get_uri_args()
        if args.ip then
            record = args.ip
        else
            record = ngx.var.remote_addr
        end
        local ptr = getptr(record)
        ngx.say(ptr)
    }
}
location = /v1/dns/ptr.json {
    content_by_lua_block {
        -- Function to get our PTR!
        local getptr       = require("geojs.utils").get_ptr
        local cjson        = require("cjson")
        local json_encode  = cjson.encode

        -- Vars!
        local record
        -- Get the IP we want
        local args = ngx.req.get_uri_args()
        if args.ip then
            record = args.ip
        else
            record = ngx.var.remote_addr
        end
        local ptr = getptr(record)
        ngx.say(
            json_encode({
                ["ptr"] = ptr
            })
        )
    }
}
location = /v1/dns/ptr.js {
    content_by_lua_block {
        -- Function to get our PTR!
        local getptr       = require("geojs.utils").get_ptr
        local get_callback = require("geojs.utils").generate_callback
        local cjson        = require("cjson")
        local json_encode  = cjson.encode

        -- Vars!
        local record, callback

        -- Get the IP we want
        local args = ngx.req.get_uri_args()
        if args.ip then
            record = args.ip
        else
            record = ngx.var.remote_addr
        end

        -- Override our callback if it exists
        callback = get_callback('ptr', args)

        local ptr = getptr(record)
        ngx.say(
            callback,
            '(',
            json_encode({
                ["ptr"] = ptr
            }),
            ')'
        )
    }
}
