location = /v1/ip {
    default_type text/plain;
    content_by_lua_block {
        ngx.say(ngx.var.remote_addr)
    }
}

location = /v1/ip.json {
    default_type application/json;
    content_by_lua_block {
        local cjson = require("cjson")
        ngx.say(cjson.encode({ip = ngx.var.remote_addr}))
    }
}

location = /v1/ip.js {
    default_type application/javascript;
    content_by_lua_block {
        local get_callback = require("geojs.utils").generate_callback
        local cjson        = require("cjson")
        local json_encode  = cjson.encode
        -- Get callback
        local args = ngx.req.get_uri_args()
        local callback = get_callback('geoip', args)

        ngx.say(callback, '(', json_encode({ip = ngx.var.remote_addr}), ')')
    }
}

location = /v1/ip/country {
    default_type text/plain;
    content_by_lua_block {
        local args        = ngx.req.get_uri_args()
        local split       = require("geojs.utils").split
        local upstreamreq = require("geojs.utils").upstream_req
        local reqpath     = '/v1/ip/country'
        if args.ip then
            local ips  = {}
            local msg  = ""
            local info = ""
            --- Put our IPs into a table
            ips = split(args.ip, ',')
            for k,v in ipairs(ips) do
                -- Get our info from upstream
                info = upstreamreq(reqpath, v)
                -- Add our new info to our msg
                msg = msg .. v .. ': ' .. info
            end
            ngx.say(msg)
        else
            ngx.say(ngx.var.geoip_country_code)
        end
    }
}

location = /v1/ip/country/full {
    default_type text/plain;
    content_by_lua_block {
        local args        = ngx.req.get_uri_args()
        local split       = require("geojs.utils").split
        local upstreamreq = require("geojs.utils").upstream_req
        local reqpath     = '/v1/ip/country/full'
        if args.ip then
            local ips  = {}
            local msg  = ""
            local info = ""
            --- Put our IPs into a table
            ips = split(args.ip, ',')
            for k,v in ipairs(ips) do
                -- Get our info from upstream
                info = upstreamreq(reqpath, v)
                -- Add our new info to our msg
                msg = msg .. v .. ': ' .. info
            end
            ngx.say(msg)
        else
            ngx.say(ngx.var.geoip_country_name)
        end
    }
}

location = /v1/ip/country.json {
    default_type application/json;
    content_by_lua_block {
        local args        = ngx.req.get_uri_args()
        local ngx_var     = ngx.var
        local split       = require("geojs.utils").split
        local upstreamreq = require("geojs.utils").upstream_req
        local cjson       = require("cjson")
        local json_encode = cjson.encode
        local reqpath     = '/v1/ip/country.json'
        if args.ip then
            local ips  = {}
            local msg  = {}
            local info = ""
            -- Put our IPs into a table
            ips = split(args.ip, ',')
            -- Get our info for each IP
            for k,v in ipairs(ips) do
                -- Get our info form upstream
                info = upstreamreq(reqpath, v)
                -- Add our new info to our msg table
                table.insert(msg, cjson.decode(info))
            end
            ngx.say(json_encode(msg))
        else
            -- Set our req IP
            req_ip = ngx.var.remote_addr
            ngx.say(json_encode({
                ip         = req_ip,
                request_ip = ngx.req.get_headers()["X-Orig-IP"],
                country_3  = ngx_var.geoip_country_code3,
                country    = ngx_var.geoip_country_code,
                name       = ngx_var.geoip_country_name,
            }))
        end
    }
}

location = /v1/ip/country.js {
    default_type application/javascript;
    content_by_lua_block {
        local args         = ngx.req.get_uri_args()
        local ngx_var      = ngx.var
        local split        = require("geojs.utils").split
        local upstreamreq  = require("geojs.utils").upstream_req
        local get_callback = require("geojs.utils").generate_callback
        local cjson        = require("cjson")
        local json_encode  = cjson.encode
        local json_decode  = cjson.decode
        local reqpath      = '/v1/ip/country.json'

        -- Get our custom callback is it exists
        local callback = get_callback('countryip', args)

        -- If we have IP args, lets use those
        if args.ip then
            local ips  = {}
            local msg  = {}
            local info = ""
            -- Put our IPs into a table
            ips = split(args.ip, ",")
            -- Get our info for each IP
            for k,v in ipairs(ips) do
                -- Get our info from upstream
                info = upstreamreq(reqpath, v)
                -- Add our new info to our msg table
                table.insert(msg, json_decode(info))
            end
            ngx.say(
                callback,
                "(",
                json_encode(msg),
                ")"
            )
        else
            -- Since we don't have an IP arg we're assuming we've just got a single IP
            local req_ip = ngx.var.remote_addr
            ngx.say(
                callback,
                '(',
                json_encode({
                    ip         = req_ip,
                    request_ip = ngx.req.get_headers()["X-Orig-IP"],
                    country_3  = ngx_var.geoip_country_code3,
                    country    = ngx_var.geoip_country_code,
                    name       = ngx_var.geoip_country_name,
                }),
                ')'
            )
        end
    }
}

location = /v1/ip/geo.json {
    content_by_lua_block {
        local args        = ngx.req.get_uri_args()
        local ngx_var     = ngx.var
        local split       = require("geojs.utils").split
        local upstreamreq = require("geojs.utils").upstream_req
        local cjson       = require("cjson")
        local json_encode = cjson.encode
        local json_decode = cjson.decode
        local reqpath     = '/v1/ip/geo.json'
        if args.ip then
            local ips  = {}
            local msg  = {}
            local info = ""
            -- Put our IPs into a table
            ips = split(args.ip, ',')
            -- Get our info for each IP
            for k,v in ipairs(ips) do
                -- Get our info form upstream
                info = upstreamreq(reqpath, v)
                -- Add our new info to our msg table
                table.insert(msg, json_decode(info))
            end
            ngx.say(json_encode(msg))
        else
            -- Set our req IP
            local req_ip = ngx.var.remote_addr
            ngx.say(json_encode({
                ip             = req_ip,
                request_ip     = ngx.req.get_headers()["X-Orig-IP"],
                country_code   = ngx_var.geoip_country_code,
                country_code3  = ngx_var.geoip_country_code3,
                country        = ngx_var.geoip_country_name,
                continent_code = ngx_var.geoip_city_continent_code,
                region         = ngx_var.geoip_region_name,
                city           = ngx_var.geoip_city,
                latitude       = ngx_var.geoip_latitude,
                longitude      = ngx_var.geoip_longitude,
                area_code      = ngx_var.geoip_area_code,
                timezone       = ngx_var.geoip_timezone,
                organization   = ngx_var.geoip_org,
                offset         = ngx_var.geoip_offset
            }))
        end
    }
}

location = /v1/ip/geo.js {
    content_by_lua_block {
        local args         = ngx.req.get_uri_args()
        local ngx_var      = ngx.var
        local split        = require("geojs.utils").split
        local upstreamreq  = require("geojs.utils").upstream_req
        local get_callback = require("geojs.utils").generate_callback
        local cjson        = require("cjson")
        local json_encode  = cjson.encode
        local json_decode  = cjson.decode
        local reqpath      = '/v1/ip/geo.json'

        -- Get our custom callback if we've got one
        local callback = get_callback('geoip', args)

        -- If we have IPs in args loop through them
        if args.ip then
            local ips  = {}
            local msg  = {}
            local info = ""
            -- Put our IPs into a table
            ips = split(args.ip, ",")
            -- Get our info for each IP
            for k,v in ipairs(ips) do
                info = upstreamreq(reqpath, v)
                -- Add our new info to our msg table
                table.insert(msg, json_decode(info))
            end
            -- Send our response back!
            ngx.say(
                callback,
                "(",
                json_encode(msg),
                ")"
            )
        else
            -- Since we don't have an IP arg we're assuming we've just got a single IP
            local req_ip = ngx.var.remote_addr
            ngx.say(
                callback,
                '(',
                json_encode({
                    ip             = req_ip,
                    request_ip     = ngx.req.get_headers()["X-Orig-IP"],
                    country_code   = ngx_var.geoip_country_code,
                    country_code3  = ngx_var.geoip_country_code3,
                    country        = ngx_var.geoip_country_name,
                    continent_code = ngx_var.geoip_city_continent_code,
                    region         = ngx_var.geoip_region_name,
                    city           = ngx_var.geoip_city,
                    latitude       = ngx_var.geoip_latitude,
                    longitude      = ngx_var.geoip_longitude,
                    area_code      = ngx_var.geoip_area_code,
                    timezone       = ngx_var.geoip_timezone,
                    organization   = ngx_var.geoip_org,
                    offset         = ngx_var.geoip_offset
                }),
                ')'
            )
        end
    }
}
